const { ethers } = require("hardhat");
require("dotenv").config();

/**
 * Script de teste completo para o contrato PRFIC na BSC Testnet
 * Testa: registro de empresa, minera√ß√£o de tokens, valida√ß√£o de proof-of-work
 */
async function testContract(contractAddress) {
  console.log("üß™ Iniciando testes do contrato PRFIC...");
  console.log("=" * 60);

  // Conectar ao contrato
  const PRFIC = await ethers.getContractFactory("PRFIC");
  const prfic = PRFIC.attach(contractAddress);
  
  // Obter signers
  const [deployer] = await ethers.getSigners();
  console.log(`üë§ Testador: ${deployer.address}`);
  
  // Verificar rede
  const network = await ethers.provider.getNetwork();
  console.log(`üì° Rede: ${network.name} (Chain ID: ${network.chainId})`);

  try {
    // 1. Verificar informa√ß√µes b√°sicas do contrato
    console.log("\nüìã 1. Verificando informa√ß√µes b√°sicas...");
    
    const name = await prfic.name();
    const symbol = await prfic.symbol();
    const totalSupply = await prfic.totalSupply();
    const maxSupply = await prfic.MAX_SUPPLY();
    const treasury = await prfic.treasury();
    
    console.log(`   Nome: ${name}`);
    console.log(`   S√≠mbolo: ${symbol}`);
    console.log(`   Supply Total: ${ethers.formatEther(totalSupply)} PRFIC`);
    console.log(`   Supply M√°ximo: ${ethers.formatEther(maxSupply)} PRFIC`);
    console.log(`   Treasury: ${treasury}`);

    // 2. Testar registro de empresa
    console.log("\nüè¢ 2. Testando registro de empresa...");
    
    const companyName = "Empresa Teste PRFI";
    const isRegistered = await prfic.registeredCompanies(deployer.address);
    
    if (!isRegistered) {
      console.log("   Registrando empresa...");
      const tx = await prfic.registerCompany(companyName);
      await tx.wait();
      console.log(`   ‚úÖ Empresa registrada: ${companyName}`);
    } else {
      console.log("   ‚úÖ Empresa j√° registrada");
    }

    // 3. Testar minera√ß√£o de tokens
    console.log("\n‚õèÔ∏è  3. Testando minera√ß√£o de tokens...");
    
    const batchId = `test-batch-${Date.now()}`;
    const eventsCount = 1000; // 1000 eventos = 1 PRFIC
    const merkleRoot = ethers.keccak256(ethers.toUtf8Bytes("test-merkle-root"));
    
    console.log(`   Batch ID: ${batchId}`);
    console.log(`   Eventos: ${eventsCount}`);
    console.log(`   Merkle Root: ${merkleRoot}`);
    
    // Encontrar nonce v√°lido
    console.log("   üîç Procurando nonce v√°lido...");
    
    let nonce = 0;
    let blockHash;
    let validNonce = false;
    
    // Tentar encontrar nonce v√°lido (m√°ximo 100.000 tentativas)
    for (let i = 0; i < 100000; i++) {
      blockHash = await prfic.generateBlockHash(
        deployer.address,
        batchId,
        eventsCount,
        i,
        merkleRoot
      );
      
      const isValid = await prfic.isValidProofOfWork(blockHash);
      if (isValid) {
        nonce = i;
        validNonce = true;
        const difficulty = await prfic.calculateDifficulty(blockHash);
        console.log(`   ‚úÖ Nonce v√°lido encontrado: ${nonce}`);
        console.log(`   üìä Dificuldade: ${difficulty}`);
        console.log(`   üîó Block Hash: ${blockHash}`);
        break;
      }
    }
    
    if (!validNonce) {
      throw new Error("N√£o foi poss√≠vel encontrar nonce v√°lido");
    }

    // Verificar saldos antes da minera√ß√£o
    const balanceBefore = await prfic.balanceOf(deployer.address);
    const treasuryBalanceBefore = await prfic.balanceOf(treasury);
    
    console.log(`   üí∞ Saldo antes: ${ethers.formatEther(balanceBefore)} PRFIC`);
    console.log(`   üèõÔ∏è  Treasury antes: ${ethers.formatEther(treasuryBalanceBefore)} PRFIC`);

    // Executar minera√ß√£o
    console.log("   ‚õèÔ∏è  Executando minera√ß√£o...");
    
    const mintTx = await prfic.mintBatch(
      batchId,
      eventsCount,
      nonce,
      merkleRoot,
      {
        gasLimit: 500000 // Gas limit alto para minera√ß√£o
      }
    );
    
    const receipt = await mintTx.wait();
    console.log(`   ‚úÖ Minera√ß√£o conclu√≠da! Gas usado: ${receipt.gasUsed}`);

    // Verificar saldos ap√≥s minera√ß√£o
    const balanceAfter = await prfic.balanceOf(deployer.address);
    const treasuryBalanceAfter = await prfic.balanceOf(treasury);
    
    console.log(`   üí∞ Saldo depois: ${ethers.formatEther(balanceAfter)} PRFIC`);
    console.log(`   üèõÔ∏è  Treasury depois: ${ethers.formatEther(treasuryBalanceAfter)} PRFIC`);
    
    const tokensEarned = balanceAfter - balanceBefore;
    const treasuryEarned = treasuryBalanceAfter - treasuryBalanceBefore;
    
    console.log(`   üéâ Tokens minerados: ${ethers.formatEther(tokensEarned)} PRFIC`);
    console.log(`   üè¶ Treasury recebeu: ${ethers.formatEther(treasuryEarned)} PRFIC`);

    // 4. Verificar estat√≠sticas
    console.log("\nüìä 4. Verificando estat√≠sticas...");
    
    const [events, tokens, registered, name_stored, lastNonce] = await prfic.getCompanyStats(deployer.address);
    console.log(`   Eventos processados: ${events}`);
    console.log(`   Tokens recebidos: ${ethers.formatEther(tokens)} PRFIC`);
    console.log(`   Registrada: ${registered}`);
    console.log(`   Nome: ${name_stored}`);
    console.log(`   √öltimo nonce: ${lastNonce}`);

    // 5. Verificar estat√≠sticas globais
    const [globalSupply, globalBatches, globalEvents, globalTreasuryBalance] = await prfic.getGlobalStats();
    console.log(`   Supply global: ${ethers.formatEther(globalSupply)} PRFIC`);
    console.log(`   Lotes processados: ${globalBatches}`);
    console.log(`   Eventos globais: ${globalEvents}`);
    console.log(`   Saldo treasury: ${ethers.formatEther(globalTreasuryBalance)} PRFIC`);

    console.log("\n" + "=" * 60);
    console.log("üéâ TODOS OS TESTES PASSARAM COM SUCESSO!");
    console.log("=" * 60);
    
    return {
      success: true,
      contractAddress,
      tokensEarned: ethers.formatEther(tokensEarned),
      treasuryEarned: ethers.formatEther(treasuryEarned),
      batchId,
      nonce,
      blockHash
    };

  } catch (error) {
    console.error("‚ùå Erro durante os testes:", error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  const contractAddress = process.argv[2];
  
  if (!contractAddress) {
    console.error("‚ùå Uso: node scripts/test-contract.js <CONTRACT_ADDRESS>");
    process.exit(1);
  }
  
  testContract(contractAddress)
    .then((result) => {
      if (result.success) {
        console.log("‚úÖ Testes conclu√≠dos com sucesso!");
        process.exit(0);
      } else {
        console.error("‚ùå Testes falharam:", result.error);
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error("‚ùå Erro fatal:", error);
      process.exit(1);
    });
}

module.exports = testContract;
