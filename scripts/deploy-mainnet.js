const { ethers } = require("hardhat");
require("dotenv").config();

async function main() {
  console.log("üöÄ DEPLOY DO PRFI PROTOCOL NA BSC MAINNET");
  console.log("=" * 60);
  console.log("‚ö†Ô∏è  ATEN√á√ÉO: Este √© um deploy em PRODU√á√ÉO!");
  console.log("‚ö†Ô∏è  Verifique todas as configura√ß√µes antes de prosseguir!");
  console.log("=" * 60);

  // Verificar configura√ß√µes
  const network = await ethers.provider.getNetwork();
  console.log(`üì° Rede: ${network.name} (Chain ID: ${network.chainId})`);
  
  if (network.chainId !== 56n && network.chainId !== 56) {
    console.log(`‚ùå ERRO: Chain ID incorreto: ${network.chainId} (esperado: 56)`);
    console.log("‚ùå N√£o est√° conectado √† BSC Mainnet!");
    process.exit(1);
  }

  // Obter deployer
  const [deployer] = await ethers.getSigners();
  console.log(`üë§ Deployer: ${deployer.address}`);
  
  // Verificar se √© a conta do treasury
  const expectedTreasury = "0xB4CA2829E762C77D4A813b54195278bB78F7e22c";
  if (deployer.address.toLowerCase() !== expectedTreasury.toLowerCase()) {
    console.log(`‚ùå ERRO: Conta incorreta!`);
    console.log(`‚ùå Esperado: ${expectedTreasury}`);
    console.log(`‚ùå Atual: ${deployer.address}`);
    process.exit(1);
  }
  
  // Verificar saldo
  const balance = await ethers.provider.getBalance(deployer.address);
  console.log(`üí∞ Saldo: ${ethers.formatEther(balance)} BNB`);
  
  const minBalance = ethers.parseEther("0.01"); // M√≠nimo 0.01 BNB para mainnet (mais econ√¥mico)
  if (balance < minBalance) {
    console.log(`‚ùå ERRO: Saldo insuficiente!`);
    console.log(`‚ùå M√≠nimo necess√°rio: 0.01 BNB`);
    console.log(`‚ùå Saldo atual: ${ethers.formatEther(balance)} BNB`);
    process.exit(1);
  }

  // Configura√ß√µes de deploy para mainnet (econ√¥micas)
  const deployGasPrice = ethers.parseUnits("1.2", "gwei"); // 1.2 gwei - muito econ√¥mico
  const gasLimit = 3000000; // Gas limit otimizado

  console.log(`‚õΩ Gas Price deploy: ${ethers.formatUnits(deployGasPrice, "gwei")} gwei`);
  console.log(`‚õΩ Gas Limit: ${gasLimit}`);

  // Calcular custo estimado
  const estimatedCost = deployGasPrice * BigInt(gasLimit);
  console.log(`üí∏ Custo estimado: ${ethers.formatEther(estimatedCost)} BNB`);

  // Confirma√ß√£o final
  console.log("\n" + "=" * 60);
  console.log("üî¥ CONFIRMA√á√ÉO FINAL PARA DEPLOY EM PRODU√á√ÉO");
  console.log("=" * 60);
  console.log(`üìç Rede: BSC Mainnet (Chain ID: ${network.chainId})`);
  console.log(`üë§ Treasury: ${deployer.address}`);
  console.log(`üí∞ Saldo: ${ethers.formatEther(balance)} BNB`);
  console.log(`üí∏ Custo: ~${ethers.formatEther(estimatedCost)} BNB`);
  console.log(`üè¶ Pre-mine: 24.4M PRFIC para treasury`);
  console.log(`üìà Supply m√°ximo: 122M PRFIC`);
  console.log("=" * 60);

  // Aguardar 10 segundos para reflex√£o
  console.log("‚è≥ Aguardando 10 segundos para confirma√ß√£o...");
  await new Promise(resolve => setTimeout(resolve, 10000));

  console.log("\nüî® Compilando contratos...");
  
  // Deploy do contrato PRFIC
  console.log("\nüì¶ Fazendo deploy do contrato PRFIC na MAINNET...");
  
  const PRFIC = await ethers.getContractFactory("PRFIC");
  
  console.log("üöÄ Enviando transa√ß√£o de deploy...");
  
  // Deploy com configura√ß√µes otimizadas para mainnet
  const prfic = await PRFIC.deploy({
    gasLimit: gasLimit,
    gasPrice: deployGasPrice
  });
  
  const deployTx = prfic.deploymentTransaction();
  console.log(`üì§ TX Hash: ${deployTx.hash}`);
  console.log("‚è≥ Aguardando confirma√ß√µes...");
  
  await prfic.waitForDeployment();
  const contractAddress = await prfic.getAddress();
  
  console.log(`‚úÖ CONTRATO DEPLOYADO COM SUCESSO!`);
  console.log(`üìç Endere√ßo: ${contractAddress}`);
  
  // Verificar deploy
  console.log("\nüîç Verificando deploy...");
  
  const name = await prfic.name();
  const symbol = await prfic.symbol();
  const totalSupply = await prfic.totalSupply();
  const maxSupply = await prfic.MAX_SUPPLY();
  const premineAmount = await prfic.PREMINE_AMOUNT();
  const treasury = await prfic.treasury();
  const treasuryBalance = await prfic.balanceOf(treasury);
  
  console.log(`üìã Nome: ${name}`);
  console.log(`üè∑Ô∏è  S√≠mbolo: ${symbol}`);
  console.log(`üìä Supply Total: ${ethers.formatEther(totalSupply)} PRFIC`);
  console.log(`üìà Supply M√°ximo: ${ethers.formatEther(maxSupply)} PRFIC`);
  console.log(`üè¶ Pre-mine: ${ethers.formatEther(premineAmount)} PRFIC`);
  console.log(`üèõÔ∏è  Treasury: ${treasury}`);
  console.log(`üíé Saldo Treasury: ${ethers.formatEther(treasuryBalance)} PRFIC`);
  
  // Salvar informa√ß√µes do deploy
  const deployInfo = {
    network: "BSC Mainnet",
    chainId: network.chainId.toString(),
    contractAddress: contractAddress,
    deployerAddress: deployer.address,
    transactionHash: deployTx.hash,
    blockNumber: deployTx.blockNumber?.toString(),
    gasUsed: gasLimit.toString(),
    gasPrice: ethers.formatUnits(deployGasPrice, "gwei"),
    deploymentCost: ethers.formatEther(deployGasPrice * BigInt(gasLimit)),
    timestamp: new Date().toISOString(),
    contractInfo: {
      name: name,
      symbol: symbol,
      totalSupply: ethers.formatEther(totalSupply),
      maxSupply: ethers.formatEther(maxSupply),
      premineAmount: ethers.formatEther(premineAmount),
      treasury: treasury,
      treasuryBalance: ethers.formatEther(treasuryBalance)
    }
  };
  
  // Salvar em arquivo
  const fs = require("fs");
  const path = require("path");
  
  const deploysDir = path.join(__dirname, "..", "deploys");
  if (!fs.existsSync(deploysDir)) {
    fs.mkdirSync(deploysDir, { recursive: true });
  }
  
  const deployFile = path.join(deploysDir, "bsc-mainnet.json");
  fs.writeFileSync(deployFile, JSON.stringify(deployInfo, null, 2));
  
  console.log(`üíæ Informa√ß√µes salvas em: ${deployFile}`);
  
  // Resultado final
  console.log("\n" + "=" * 80);
  console.log("üéâ DEPLOY EM PRODU√á√ÉO CONCLU√çDO COM SUCESSO!");
  console.log("=" * 80);
  console.log(`üìç Contrato PRFIC: ${contractAddress}`);
  console.log(`üîó BscScan: https://bscscan.com/address/${contractAddress}`);
  console.log(`üèõÔ∏è  Treasury: ${treasury}`);
  console.log(`üíé Pre-mine: ${ethers.formatEther(premineAmount)} PRFIC`);
  console.log(`üí∏ Custo do deploy: ${deployInfo.deploymentCost} BNB`);
  console.log("=" * 80);
  
  console.log("\nüìã Pr√≥ximos passos IMPORTANTES:");
  console.log("1. ‚úÖ Verificar contrato no BscScan");
  console.log("2. ‚úÖ Documentar endere√ßo do contrato");
  console.log("3. ‚úÖ Atualizar configura√ß√µes do sistema");
  console.log("4. ‚úÖ Comunicar deploy para a equipe");
  console.log("5. ‚úÖ Monitorar primeiras transa√ß√µes");
  
  console.log("\nüîí SEGURAN√áA:");
  console.log("- Contrato √© imut√°vel ap√≥s deploy");
  console.log("- Treasury configurado corretamente");
  console.log("- Sistema totalmente descentralizado");
  console.log("- Proof-of-work validado");
  
  return {
    contractAddress,
    deployInfo
  };
}

// Executar deploy
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error("‚ùå ERRO CR√çTICO NO DEPLOY:", error);
      process.exit(1);
    });
}

module.exports = main;
