"""
Exemplo de uso do sistema de submiss√£o PRFI.

Este exemplo demonstra como usar o submitter para processar blocos pendentes
e submet√™-los para a blockchain Polygon.
"""

import asyncio
import os
from datetime import datetime

from submitter import (
    BlockSubmitter,
    SubmissionConfig,
    BlockScanner,
    SubmissionValidator,
    BlockBatcher
)


async def exemplo_submissao_basica():
    """Exemplo b√°sico de submiss√£o de blocos."""
    print("=== Exemplo de Submiss√£o B√°sica ===")
    
    # Configura√ß√£o do submitter
    config = SubmissionConfig(
        # Blockchain
        rpc_url="https://polygon-rpc.com",  # Polygon mainnet
        contract_address="0x1234567890123456789012345678901234567890",  # Endere√ßo do contrato PRFIC
        private_key="0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",  # Sua chave privada
        chain_id=137,  # Polygon mainnet
        
        # Batching
        batch_size=5,
        max_batch_size=20,
        min_batch_size=1,
        
        # Gas
        gas_limit=500000,
        gas_price_multiplier=1.1,
        max_gas_price=100000000000,  # 100 gwei
        
        # Retry
        max_retries=3,
        retry_delay=60,
        
        # Diret√≥rios
        blocks_directory="./blocos",
        logs_directory="./logs"
    )
    
    # Criar submitter
    submitter = BlockSubmitter(config)
    
    try:
        # Processar blocos pendentes
        print("Processando blocos pendentes...")
        results = await submitter.process_pending_blocks()
        
        # Mostrar resultados
        print(f"\nResultados da submiss√£o:")
        for result in results:
            if result.success:
                print(f"‚úÖ Batch {result.batch_id}: {result.blocks_submitted} blocos, {result.points_submitted} pontos")
                print(f"   TX Hash: {result.tx_hash}")
            else:
                print(f"‚ùå Batch {result.batch_id}: {result.error}")
                if result.retry_scheduled:
                    print(f"   Retry agendado")
        
        # Mostrar estat√≠sticas
        stats = submitter.get_stats()
        print(f"\nEstat√≠sticas:")
        print(f"- Blockchain conectada: {stats['blockchain']['connected']}")
        print(f"- √öltimo bloco: {stats['blockchain']['latest_block']}")
        print(f"- Blocos pendentes: {stats['scanner']['total_pending']}")
        
    except Exception as e:
        print(f"Erro na submiss√£o: {e}")


async def exemplo_processamento_continuo():
    """Exemplo de processamento cont√≠nuo."""
    print("\n=== Exemplo de Processamento Cont√≠nuo ===")
    
    config = SubmissionConfig(
        rpc_url="https://polygon-rpc.com",
        contract_address="0x1234567890123456789012345678901234567890",
        private_key="0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
        batch_size=10,
        blocks_directory="./blocos"
    )
    
    submitter = BlockSubmitter(config)
    
    print("Iniciando processamento cont√≠nuo (pressione Ctrl+C para parar)...")
    
    try:
        # Processar a cada 2 minutos
        await submitter.start_continuous_processing(interval=120)
    except KeyboardInterrupt:
        print("\nParando processamento cont√≠nuo...")
        submitter.stop_continuous_processing()


async def exemplo_componentes_individuais():
    """Exemplo usando componentes individuais."""
    print("\n=== Exemplo de Componentes Individuais ===")
    
    config = SubmissionConfig(
        rpc_url="https://polygon-rpc.com",
        contract_address="0x1234567890123456789012345678901234567890",
        private_key="0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
        blocks_directory="./blocos"
    )
    
    # 1. Scanner - encontrar blocos pendentes
    scanner = BlockScanner(config)
    pending_blocks = scanner.scan_pending_blocks()
    print(f"Blocos pendentes encontrados: {len(pending_blocks)}")
    
    if not pending_blocks:
        print("Nenhum bloco pendente para processar")
        return
    
    # 2. Validator - validar blocos
    validator = SubmissionValidator(config)
    valid_blocks, errors = validator.validate_blocks(pending_blocks)
    print(f"Blocos v√°lidos: {len(valid_blocks)}")
    if errors:
        print(f"Erros de valida√ß√£o: {len(errors)}")
        for error in errors[:3]:  # Mostrar apenas os primeiros 3
            print(f"  - {error}")
    
    if not valid_blocks:
        print("Nenhum bloco v√°lido para submiss√£o")
        return
    
    # 3. Batcher - criar batches
    batcher = BlockBatcher(config)
    batches = batcher.create_batches(valid_blocks)
    print(f"Batches criados: {len(batches)}")
    
    for i, batch in enumerate(batches):
        print(f"  Batch {i+1}: {len(batch.blocks)} blocos, {batch.total_points} pontos")
    
    # 4. Submitter - submeter batches
    submitter = BlockSubmitter(config)
    
    for batch in batches:
        print(f"\nSubmetendo batch {batch.batch_id}...")
        result = await submitter.submit_batch(batch)
        
        if result.success:
            print(f"‚úÖ Sucesso: TX {result.tx_hash}")
        else:
            print(f"‚ùå Falha: {result.error}")


async def exemplo_monitoramento():
    """Exemplo de monitoramento de transa√ß√µes."""
    print("\n=== Exemplo de Monitoramento ===")
    
    config = SubmissionConfig(
        rpc_url="https://polygon-rpc.com",
        contract_address="0x1234567890123456789012345678901234567890",
        private_key="0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
        blocks_directory="./blocos"
    )
    
    submitter = BlockSubmitter(config)
    
    # Monitorar confirma√ß√µes
    print("Monitorando confirma√ß√µes de transa√ß√µes...")
    await submitter.monitor_confirmations()
    
    # Obter estat√≠sticas do monitor
    stats = submitter.get_stats()
    if 'monitor' in stats:
        monitor_stats = stats['monitor']
        print(f"Transa√ß√µes monitoradas: {monitor_stats.get('monitored_transactions', 0)}")
        print(f"Tempo m√©dio de confirma√ß√£o: {monitor_stats.get('avg_confirmation_time', 0):.1f}s")


def exemplo_configuracao_avancada():
    """Exemplo de configura√ß√£o avan√ßada."""
    print("\n=== Exemplo de Configura√ß√£o Avan√ßada ===")
    
    # Configura√ß√£o para ambiente de desenvolvimento
    dev_config = SubmissionConfig(
        # Testnet Polygon Mumbai
        rpc_url="https://rpc-mumbai.maticvigil.com",
        contract_address="0x...",  # Endere√ßo do contrato na testnet
        private_key=os.getenv("PRIVATE_KEY_TESTNET"),
        chain_id=80001,  # Mumbai testnet
        
        # Batching otimizado para desenvolvimento
        batch_size=3,
        max_batch_size=10,
        min_batch_size=1,
        
        # Gas conservador para testnet
        gas_limit=300000,
        gas_price_multiplier=1.0,
        max_gas_price=50000000000,  # 50 gwei
        
        # Retry agressivo para testes
        max_retries=5,
        retry_delay=30,
        exponential_backoff=True,
        
        # Confirma√ß√µes r√°pidas para desenvolvimento
        confirmation_blocks=3,
        poll_interval=15,
        
        # Otimiza√ß√µes habilitadas
        enable_gas_optimization=True,
        enable_batch_optimization=True,
        parallel_submissions=1,
        
        # Diret√≥rios espec√≠ficos
        blocks_directory="./test_blocos",
        logs_directory="./test_logs"
    )
    
    print("Configura√ß√£o de desenvolvimento criada:")
    print(f"- RPC: {dev_config.rpc_url}")
    print(f"- Chain ID: {dev_config.chain_id}")
    print(f"- Batch size: {dev_config.batch_size}")
    print(f"- Gas limit: {dev_config.gas_limit}")
    print(f"- Max retries: {dev_config.max_retries}")
    
    # Configura√ß√£o para produ√ß√£o
    prod_config = SubmissionConfig(
        # Mainnet Polygon
        rpc_url="https://polygon-rpc.com",
        contract_address=os.getenv("PRFIC_CONTRACT_ADDRESS"),
        private_key=os.getenv("PRIVATE_KEY_MAINNET"),
        chain_id=137,
        
        # Batching otimizado para produ√ß√£o
        batch_size=20,
        max_batch_size=50,
        min_batch_size=5,
        
        # Gas otimizado para mainnet
        gas_limit=800000,
        gas_price_multiplier=1.2,
        max_gas_price=200000000000,  # 200 gwei
        
        # Retry conservador para produ√ß√£o
        max_retries=3,
        retry_delay=120,
        exponential_backoff=True,
        
        # Confirma√ß√µes seguras para produ√ß√£o
        confirmation_blocks=12,
        poll_interval=60,
        
        # Todas as otimiza√ß√µes habilitadas
        enable_gas_optimization=True,
        enable_batch_optimization=True,
        parallel_submissions=2,
        
        # Diret√≥rios de produ√ß√£o
        blocks_directory="/var/prfi/blocos",
        logs_directory="/var/prfi/logs"
    )
    
    print("\nConfigura√ß√£o de produ√ß√£o criada:")
    print(f"- RPC: {prod_config.rpc_url}")
    print(f"- Chain ID: {prod_config.chain_id}")
    print(f"- Batch size: {prod_config.batch_size}")
    print(f"- Gas limit: {prod_config.gas_limit}")
    print(f"- Max retries: {prod_config.max_retries}")


async def main():
    """Fun√ß√£o principal com todos os exemplos."""
    print("üöÄ Exemplos do Sistema de Submiss√£o PRFI")
    print("=" * 50)
    
    # Verificar se as vari√°veis de ambiente est√£o configuradas
    if not os.getenv("PRIVATE_KEY_TESTNET"):
        print("‚ö†Ô∏è  Configure as vari√°veis de ambiente:")
        print("   export PRIVATE_KEY_TESTNET=0x...")
        print("   export PRIVATE_KEY_MAINNET=0x...")
        print("   export PRFIC_CONTRACT_ADDRESS=0x...")
        print()
    
    try:
        # Executar exemplos
        await exemplo_submissao_basica()
        await exemplo_componentes_individuais()
        await exemplo_monitoramento()
        exemplo_configuracao_avancada()
        
        # Exemplo de processamento cont√≠nuo (comentado para n√£o bloquear)
        # await exemplo_processamento_continuo()
        
    except Exception as e:
        print(f"‚ùå Erro nos exemplos: {e}")
    
    print("\n‚úÖ Exemplos conclu√≠dos!")


if __name__ == "__main__":
    # Executar exemplos
    asyncio.run(main())
